/// <reference types="node" />
import { EventEmitter } from 'events';
import { P2PConfig, P2PMessagePacket, P2PNetworkStatus, P2PNodeInfo, P2PPenalty, P2PRequestPacket, P2PResponsePacket } from './p2p_types';
import { P2PRequest } from './p2p_request';
export { P2PRequest };
import { EVENT_CLOSE_OUTBOUND, EVENT_CONNECT_ABORT_OUTBOUND, EVENT_CONNECT_OUTBOUND, EVENT_DISCOVERED_PEER, EVENT_FAILED_PEER_INFO_UPDATE, EVENT_FAILED_TO_FETCH_PEER_INFO, EVENT_FAILED_TO_PUSH_NODE_INFO, EVENT_INBOUND_SOCKET_ERROR, EVENT_MESSAGE_RECEIVED, EVENT_OUTBOUND_SOCKET_ERROR, EVENT_REQUEST_RECEIVED, EVENT_UPDATED_PEER_INFO } from './peer_pool';
export { EVENT_CLOSE_OUTBOUND, EVENT_CONNECT_ABORT_OUTBOUND, EVENT_CONNECT_OUTBOUND, EVENT_DISCOVERED_PEER, EVENT_FAILED_TO_FETCH_PEER_INFO, EVENT_FAILED_TO_PUSH_NODE_INFO, EVENT_REQUEST_RECEIVED, EVENT_MESSAGE_RECEIVED, EVENT_OUTBOUND_SOCKET_ERROR, EVENT_INBOUND_SOCKET_ERROR, EVENT_UPDATED_PEER_INFO, EVENT_FAILED_PEER_INFO_UPDATE, };
export declare const EVENT_NEW_INBOUND_PEER = "newInboundPeer";
export declare const EVENT_FAILED_TO_ADD_INBOUND_PEER = "failedToAddInboundPeer";
export declare const EVENT_NEW_PEER = "newPeer";
export declare const NODE_HOST_IP = "0.0.0.0";
export declare const DEFAULT_DISCOVERY_INTERVAL = 30000;
export declare const DEFAULT_SEND_PEER_LIMIT = 25;
export declare const DEFAULT_WS_MAX_PAYLOAD = 1048576;
export declare class P2P extends EventEmitter {
    private readonly _config;
    private readonly _httpServer;
    private _isActive;
    private readonly _newPeers;
    private readonly _triedPeers;
    private readonly _discoveryInterval;
    private _discoveryIntervalId;
    private _nodeInfo;
    private readonly _peerPool;
    private readonly _scServer;
    private readonly _handlePeerPoolRPC;
    private readonly _handlePeerPoolMessage;
    private readonly _handleDiscoveredPeer;
    private readonly _handleFailedToPushNodeInfo;
    private readonly _handleFailedToFetchPeerInfo;
    private readonly _handlePeerConnect;
    private readonly _handlePeerConnectAbort;
    private readonly _handlePeerClose;
    private readonly _handlePeerInfoUpdate;
    private readonly _handleFailedPeerInfoUpdate;
    private readonly _handleOutboundSocketError;
    private readonly _handleInboundSocketError;
    private readonly _peerHandshakeCheck;
    constructor(config: P2PConfig);
    get config(): P2PConfig;
    get isActive(): boolean;
    applyNodeInfo(nodeInfo: P2PNodeInfo): void;
    get nodeInfo(): P2PNodeInfo;
    applyPenalty(penalty: P2PPenalty): void;
    getNetworkStatus(): P2PNetworkStatus;
    request(packet: P2PRequestPacket): Promise<P2PResponsePacket>;
    send(message: P2PMessagePacket): void;
    private _disconnectSocketDueToFailedHandshake;
    private _startPeerServer;
    private _stopHTTPServer;
    private _stopWSServer;
    private _stopPeerServer;
    private _discoverPeers;
    private _startDiscovery;
    private _stopDiscovery;
    private _fetchSeedPeerStatus;
    private _pickRandomDiscoveredPeers;
    private _handleGetPeersRequest;
    start(): Promise<void>;
    stop(): Promise<void>;
    private _bindHandlersToPeerPool;
}
